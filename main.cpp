#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <iomanip>
using namespace std;
//StockSentinel â€“ Portfolio Tracker
class Stock {
public:
    string symbol;
    double buyPrice;
    double currentPrice;
    int shares;

    Stock(string sym, double buy, double current, int sh)
        : symbol(sym), buyPrice(buy), currentPrice(current), shares(sh) {}

    double investedValue() const {
        return buyPrice * shares;
    }

    double currentValue() const {
        return currentPrice * shares;
    }

    double profitLoss() const {
        return currentValue() - investedValue();
    }
};

vector<Stock> loadPortfolio(const string &filename) {
    vector<Stock> portfolio;
    ifstream file(filename);
    string line, symbol;
    double buyPrice, currentPrice;
    int shares;

    getline(file, line); // skip header
    while (getline(file, line)) {
        stringstream ss(line);
        string field;

        getline(ss, symbol, ',');
        getline(ss, field, ',');
        buyPrice = stod(field);
        getline(ss, field, ',');
        currentPrice = stod(field);
        getline(ss, field, ',');
        shares = stoi(field);

        portfolio.emplace_back(symbol, buyPrice, currentPrice, shares);
    }

    return portfolio;
}

void generateHTMLReport(const vector<Stock> &portfolio, const string &filename) {
    ofstream html(filename);
    double totalInvested = 0.0, totalCurrent = 0.0;

    html << "<!DOCTYPE html><html><head><title>Stock Portfolio Report</title>"
         << "<style>body { font-family: Arial; padding: 20px; } "
         << "table { border-collapse: collapse; width: 100%; } "
         << "th, td { border: 1px solid #ddd; padding: 8px; } "
         << "th { background-color: #f2f2f2; }</style></head><body>";

    html << "<h1>ðŸ“ˆ Stock Portfolio Report</h1>";
    html << "<table><tr><th>Symbol</th><th>Invested ($)</th><th>Current ($)</th><th>Profit/Loss ($)</th></tr>";

    for (const auto &stock : portfolio) {
        double invested = stock.investedValue();
        double current = stock.currentValue();
        double pl = stock.profitLoss();

        html << "<tr><td>" << stock.symbol << "</td>"
             << "<td>" << fixed << setprecision(2) << invested << "</td>"
             << "<td>" << current << "</td>"
             << "<td style='color:" << (pl >= 0 ? "green" : "red") << "'>"
             << pl << "</td></tr>";

        totalInvested += invested;
        totalCurrent += current;
    }

    html << "</table>";
    html << "<h3>Total Invested: $" << totalInvested << "</h3>";
    html << "<h3>Total Value: $" << totalCurrent << "</h3>";
    html << "<h3>Net Gain/Loss: <span style='color:" 
         << ((totalCurrent - totalInvested) >= 0 ? "green'>" : "red'>")
         << (totalCurrent - totalInvested) << "</span></h3>";

    html << "<p><em>Generated by C++ StockSentinel</em></p>";
    html << "</body></html>";

    html.close();
    cout << "âœ” Report generated: output.html" << endl;
    cout << "ðŸ“‚ You can open it in your web browser." << endl;
}

int main() {
    string csvFile = "portfolio.csv";
    string htmlFile = "output.html";
    vector<Stock> portfolio = loadPortfolio(csvFile);
    if (portfolio.empty()) {
        cout << "No data loaded. Please check the CSV file." << endl;
        return 1;
    }
    generateHTMLReport(portfolio, htmlFile);
    return 0;
}
